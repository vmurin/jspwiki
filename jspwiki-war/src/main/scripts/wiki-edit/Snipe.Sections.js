/*!
    JSPWiki - a JSP-based WikiWiki clone.

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); fyou may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
*/
/*
Class: SnipEditor.Sections
    This dialog displays the list of page sections.
    A page section includes the header

    (all) - allows to select all sections (auto generated)
    start-of-page - only present when first section starts on an offset > 0
    section1..n - section titles, with indentation level depending on their weight

    The set of sections is generated by the parseSections() callback handler.
    This parser returns an array of section 'descriptors':
>    [ {title:text, start:char-offset, indent:indentation-level}, ... ]

    Clicking an entry triggers the updateSections() callback handler.
    FIXME: why not fire an onAction event (similar to other dialogs)

Depends:
    Snipe

*/

Snipe.Sections = new Class({

    Implements: [Events],
    Binds: ['show','update','action'],
    
    options: {
        //snipe:snip-editor
        //parser: function
        all: "( all )".localize(),
        startOfPage: "Start of Page".localize()
    },

    initialize: function(element, options){

        var self = this;

        self.element = element  //dropdown menu
            .onHover( self.container = element.get('data-sections'), self.show )
            .addEvent( 'click:relay(a)', self.action );
        self.container =  element.getParent( element.get('data-sections') );
        
        self.parser = options.parser;
        self.main = options.snipe.get('mainarea');
        self.work = options.snipe.toElement().addEvents({ 
            keyup: self.update, 
            change: self.update 
        });

        self.parse();
        self.action( location.search );  //url?section=0..n 
        self.show();
    },

    /*
    Function: parse
        Invoke the external parser on the contents of the main textarea.
        This external parser should return an array with an entry for each section:
        [ {title:text, start:char-offset, depth:nesting level}, ... ]

        >        0 : start-of-page (if applicable) => title=s-1 => cursor=-1
        >        1..n : page sections              => title=s0..sn => cursor=0..n
    */
    parse: function(){

        this.sections = this.parser( this.main.value );

    },

    /*
    Function: onOpen
        UPDATE/RFEFRESH the textarea section dialog.
        Build the DOM list-items 
    (start code)
        ul.dropdown-menu
            li
                a.indent-0.section-2 (all)
            li
                a.indent-0.section-1 Start Of Page
            li.divider
            li
                a.indent-0.section0 Title-Section-0
            li
                a.indent-0.section1 Title-Section-1
            ...
            li
                a.indent-0.section99 Title-Section-2                
    (end)        
    */
    //onOpen: function( dialog ){
    show: function( ){

        var options = this.options,
            data = [],
            sections = this.sections,
            
            addItem = function(indent,name,offset){
                data.push('li',['a.indent-'+indent+'.section'+offset,{ html:name }]);
            }

        addItem(0, options.all ,-2);
        
        if( sections[0] ){
        
            if( sections[0].start > 0 ){ addItem(0, options.startOfPage, -1); }

            data.push('li.divider');
            
            sections.each( function(item, idx){ 
                addItem( item.depth, item.title.trunc(36), idx );
            });

        }
        
        this.element.empty().adopt( data.slick() );

    },

    /*
    Function: update
        Make sure that changes to the work textarea are propagated to the main textarea.
        This functions handles the correct insertion of the changed section into the main
        textarea.
    */
    update: function(){

        //console.log("Sections: update");
        var self = this,
            main = self.main,
            work = self.work.value,
            sections = self.sections,
            s = main.value,
            //insert \n to ensure the next section always starts on a new line.
            linefeed = (work.slice(-1) != '\n')  ? '\n' : '';

        //console.log('change txta: from='+sections.begin+ ' end='+sections.end);
        main.value = s.slice(0, self.begin) + work + linefeed + s.slice(self.end);
        self.end = self.begin + work.length;

        self.parse();
    },

    /*
    Function: onAction
        This function copies the selected section from the main to the work textarea.
        It is invoked at initialization and through the dialog onAction click handler.

    Arguments:
        item - index of selected section: all, -1, 0..n
    */
    //onAction:function( item ){

    /*
    setValue: function(value){
    },
    action: function(item){
        var value = item.get('title');
        this.setValue(value).parent(value);
    },
    */
    action:function( item ){

        var self = this,
            main = self.main.value,
            sections = self.sections,
            begin = 0,
            end = main.length;

        if( item ){
        
            //item.target => event.target; this is an onclick invocation
            if( item.target ) item = item.target.className;
            
            //section-2=All, section-1=StartOfPage, section0..section99=rest
            item = ( item.match( /section=?(-?\d+)/ )||[,-2])[1].toInt();
            
            if( item == -1 ){

                //show the Start Of Page, prior to the first real section
                end = sections[0].start;

            } else if(item >= 0  && sections[item] ){

                begin = sections[item].start;
                //if( item+1 < sections.length ){ end = sections[item+1].start; }
                if( sections[item+1] ){ end = sections[item+1].start; }

            }
        }

        self.work.value = main.slice(begin, end);
        self.begin = begin;
        self.end = end;

        //now close the hover menu and focus the text-area...
        self.container.removeClass('open');
        self.container.ifClass( item >= -1, 'section-selected');
    }
});
